# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # ------------------------------------------------------------------
    # Run SharedPtr demo and capture its output
    # ------------------------------------------------------------------
    - name: Run SharedPtr demo
      id: run_demo
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        # Build the path to the executable depending on the runner OS
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          exe="./${{ matrix.build_type }}/SharedPtr.exe"
        else
          exe="./SharedPtr"
        fi

        echo "Running $exe"
        "$exe" > program_output.txt
        echo "output-file=${PWD}/program_output.txt" >> "$GITHUB_OUTPUT"
    # ------------------------------------------------------------------
    # NEW STEP 2 – verify the program produced the expected lines
    # ------------------------------------------------------------------
    - name: Check output format
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        expected_lines=(
        '*** Non‑atomic build ***'
        '--- basic lifecycle ---'
        'arr[2] = 3'
        '--- swap and move ---'
        'All tests finished.'
        )
          for line in "${expected_lines[@]}"; do
          if ! grep -Fxq "$line" program_output.txt; then
            echo "::error::Output is missing expected line: $line"
            echo '---- Actual output ----'
            cat program_output.txt
            exit 1
          fi
        done
        echo "SharedPtr demo output looks good ✅"

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
